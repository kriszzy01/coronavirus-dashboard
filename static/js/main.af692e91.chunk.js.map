{"version":3,"sources":["api/index.ts","slices/worldwide.ts","utils/helpers.ts","utils/map.js","utils/chart.ts","slices/country.ts","selectors/index.ts","slices/map.ts","components/Dropdown.tsx","components/Searchbar.tsx","hooks/useSearchbar.ts","blocks/Header.tsx","components/Card.tsx","components/MapControls.tsx","blocks/Map.tsx","blocks/DataSummary.tsx","components/Chart.tsx","blocks/DataChart.tsx","App.tsx","slices/index.ts","index.tsx"],"names":["getStatistics","parameter","a","request_url","axios","get","response","data","getHistorical","fetchStart","state","status","error","fetchFailure","payload","statistics","createSlice","name","initialState","cummulative","active","affectedCountries","todayCases","todayDeaths","todayRecovered","recovered","deaths","updated","cases","confirmed","historical","reducers","fetchWorldWideStart","fetchWorldWideSuccess","fetchWorldWideFailure","fetchAllHistoricalStart","fetchAllHistoricalSuccess","fetchAllHistoricalFailure","actions","featuresToGeoJSON","featuresObject","type","features","Object","values","map","feature","location","properties","geometry","coordinates","longitude","latitude","commify","value","numberString","String","split","reverse","reduce","prev","next","index","shouldComma","length","updatedValue","join","iconSizeByCases","tileLayer","process","markerCreator","dataType","targetDataFunction","latLng","markerProps","stats","tests","province","country","size","class","html","toFixed","getMarkerProps","marker","L","icon","divIcon","className","iconSize","popup","setLatLng","setContent","bindTooltip","on","target","_map","latlng","openOn","flyTo","historicalToChartData","lastData","convertedData","key","dataChange","nextDay","Date","today","setDate","getDate","newKey","toUTCString","x","y","historicalData","targetData","world","toPlaceValue","initialValue","places","1","2","3","4","placeValueKeys","filter","e","getPlaceKeys","valueArray","lastThree","slice","withoutLastThree","replace","result","includes","replaceAll","endsWith","baseChartOptions","maintainAspectRatio","legend","display","tooltips","mode","intersect","scales","xAxes","time","unit","displayFormats","month","gridLines","yAxes","position","ticks","callback","chartOptions","bar","line","fetchCountryStart","fetchCountrySuccess","normalizedPayload","countryInfo","lat","long","flag","customPayload","customCountryPayload","fetchCountryFailure","fetchCountryHistoryStart","fetchCountryHistorySuccess","timeline","fetchCountryHistoryFailure","getWorldwide","worldwide","getWorldHistory","getCountry","getCountryHistory","getMapData","mapData","activeData","getTargetData","setMapData","setTargetData","Dropdown","searchResult","searchTerm","setSearchTerm","dispatch","useDispatch","isSearchResults","isSearchTerm","useEffect","document","querySelector","setAttribute","removeAttribute","id","data-expanded","onClick","src","alt","Searchbar","setOpenSearchbar","openSearchbar","searchbarRef","useRef","ref","useState","setValue","handleClickOutside","event","current","contains","addEventListener","removeEventListener","useSearchbar","searchInput","setSearchInput","countries","toLowerCase","startsWith","getSearchResults","useSelector","inputRef","focus","aria-expanded","aria-controls","aria-hidden","style","height","xmlns","width","d","fill","placeholder","onChange","aria-label","Header","openMenu","setOpenMenu","data-searchcountry","aria-labelledby","role","Card","title","total","tabItems","MapControls","mapInstance","useMap","countryHistory","eachLayer","_tooltip","prop","_content","addTo","dynamicFlyTo","geoJson","option","locationsGeoJsonLayers","geoJSON","pointToLayer","removeFrom","message","item","data-selected","zoom","window","innerWidth","setView","fillRule","Map","children","southWest","LatLng","northEast","bounds","latLngBounds","MapContainer","center","minZoom","zoomControl","maxBounds","maxBoundsViscosity","DataSummary","customWorldwide","targetCountry","TileLayer","attribution","url","ZoomControl","toString","colors","Deaths","Recovered","Chart","label","mychart","C","datasets","backgroundColor","hoverBackgroundColor","borderColor","pointRadius","options","destroy","color","DataChart","chartType","setChartType","worldHistory","getTotal","deathHistory","casesHistory","recoveredHistory","data-active","App","rootReducer","combineReducers","worldwideReducer","mapDataReducer","countryReducer","store","configureStore","reducer","render"],"mappings":"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","file":"static/js/main.af692e91.chunk.js","sourcesContent":["import axios from \"axios\";\r\n\r\nexport const getStatistics = async (parameter?: string) => {\r\n  const request_url = `https://disease.sh/v3/covid-19/${parameter || \"all\"}`;\r\n\r\n  try {\r\n    const response = await axios.get(request_url);\r\n\r\n    return response.data;\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const getHistorical = async (parameter?: string) => {\r\n  const request_url = `https://disease.sh/v3/covid-19/historical/${\r\n    parameter || \"all\"\r\n  }?lastdays=270`;\r\n\r\n  try {\r\n    const response = await axios.get(request_url);\r\n\r\n    return response.data;\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n};\r\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\r\nimport { getHistorical, getStatistics } from \"../api\";\r\n\r\nimport { AppThunk, WorldWide, HistoricalAll, WorldwideState } from \"../types\";\r\n\r\nconst initialState: WorldwideState = {\r\n  status: \"idle\",\r\n  error: null,\r\n  cummulative: {\r\n    active: 0,\r\n    affectedCountries: 0,\r\n    todayCases: 0,\r\n    todayDeaths: 0,\r\n    todayRecovered: 0,\r\n    recovered: 0,\r\n    deaths: 0,\r\n    updated: 0,\r\n    cases: 0,\r\n    confirmed: 0,\r\n  },\r\n  historical: {\r\n    cases: {},\r\n    deaths: {},\r\n    recovered: {},\r\n  },\r\n};\r\n\r\nconst fetchStart = (state: WorldwideState) => {\r\n  state.status = \"pending\";\r\n  state.error = null;\r\n};\r\n\r\nconst fetchFailure = (\r\n  state: WorldwideState,\r\n  { payload }: PayloadAction<string>\r\n) => {\r\n  state.status = \"failure\";\r\n  state.error = payload;\r\n};\r\n\r\nconst statistics = createSlice({\r\n  name: \"statistics\",\r\n  initialState,\r\n  reducers: {\r\n    fetchWorldWideStart: fetchStart,\r\n\r\n    fetchWorldWideSuccess(state, { payload }: PayloadAction<WorldWide>) {\r\n      state.status = \"success\";\r\n      state.cummulative = payload;\r\n      state.error = null;\r\n    },\r\n\r\n    fetchWorldWideFailure: fetchFailure,\r\n\r\n    /***** Historical Reducers*****/\r\n    fetchAllHistoricalStart: fetchStart,\r\n\r\n    fetchAllHistoricalSuccess(\r\n      state,\r\n      { payload }: PayloadAction<HistoricalAll>\r\n    ) {\r\n      state.status = \"success\";\r\n      state.historical = payload;\r\n      state.error = null;\r\n    },\r\n\r\n    fetchAllHistoricalFailure: fetchFailure,\r\n  },\r\n});\r\n\r\nexport const {\r\n  fetchWorldWideFailure,\r\n  fetchWorldWideStart,\r\n  fetchWorldWideSuccess,\r\n  fetchAllHistoricalStart,\r\n  fetchAllHistoricalSuccess,\r\n  fetchAllHistoricalFailure,\r\n} = statistics.actions; //Action Creators\r\n\r\nexport default statistics.reducer; //Statistics Reducer\r\n\r\n/****** Thunks ******/\r\nexport const fetchWorldWide = (): AppThunk => async (dispatch) => {\r\n  try {\r\n    dispatch(fetchWorldWideStart());\r\n\r\n    const response = await getStatistics();\r\n    dispatch(fetchWorldWideSuccess(response));\r\n  } catch (error) {\r\n    dispatch(fetchWorldWideFailure(error.message));\r\n  }\r\n};\r\n\r\nexport const fetchHistoricalAll = (): AppThunk => async (dispatch) => {\r\n  try {\r\n    dispatch(fetchAllHistoricalStart());\r\n\r\n    const response = await getHistorical();\r\n    dispatch(fetchAllHistoricalSuccess(response));\r\n  } catch (error) {\r\n    dispatch(fetchAllHistoricalFailure(error.message));\r\n  }\r\n};\r\n","import { Country, Province, WorldWide } from \"../types\";\r\n\r\nexport function locationToFeature(location: any) {\r\n  return {\r\n    type: \"Feature\",\r\n    properties: {\r\n      ...location,\r\n    },\r\n    geometry: {\r\n      type: \"Point\",\r\n      coordinates: [\r\n        +location.coordinates.longitude,\r\n        +location.coordinates.latitude,\r\n      ],\r\n    },\r\n  };\r\n}\r\n\r\nexport function featuresToGeoJSON(featuresObject: any) {\r\n  const geoJsonArray = Object.values(featuresObject).map((feature) =>\r\n    locationToFeature(feature)\r\n  );\r\n\r\n  return {\r\n    type: \"FeatureCollection\",\r\n    features: geoJsonArray,\r\n  };\r\n}\r\n\r\nexport function commify(value: number) {\r\n  let numberString: string | string[] = String(value);\r\n\r\n  numberString = numberString.split(\"\").reverse();\r\n\r\n  numberString = numberString.reduce((prev, next, index) => {\r\n    let shouldComma = (index + 1) % 3 === 0 && index + 1 < numberString.length;\r\n\r\n    let updatedValue = `${prev}${next}`;\r\n\r\n    if (shouldComma) {\r\n      updatedValue = `${updatedValue},`;\r\n    }\r\n\r\n    return updatedValue;\r\n  }, \"\");\r\n\r\n  numberString = numberString.split(\"\").reverse().join(\"\");\r\n\r\n  return numberString;\r\n}\r\n\r\nexport function customCountryPayload(payload: Country[]) {\r\n  return payload.reduce((prev, next) => {\r\n    //Since we get data from different api's, I decided to use the format of one api response\r\n    const {\r\n      countryInfo: { lat, long, flag },\r\n    } = next;\r\n\r\n    //Creating the custom payload to match the response of only one api.\r\n    const customPayload = {\r\n      country: next.country,\r\n      active: next.active,\r\n      tests: next.tests,\r\n      flag,\r\n      stats: {\r\n        deaths: next.deaths,\r\n        recovered: next.recovered,\r\n        confirmed: next.cases,\r\n        todayCases: next.todayCases,\r\n        todayDeaths: next.todayDeaths,\r\n        todayRecovered: next.todayRecovered,\r\n      },\r\n      coordinates: { latitude: lat, longitude: long },\r\n    };\r\n\r\n    return {\r\n      ...prev,\r\n      [next.country]: customPayload,\r\n    };\r\n  }, {});\r\n}\r\n\r\nexport function iconSizeByCases(value: number) {\r\n  if (value <= 1000) {\r\n    return [4, 4];\r\n  }\r\n  if (value > 1000 && value <= 10000) {\r\n    return [6, 6];\r\n  }\r\n  if (value > 10000 && value <= 50000) {\r\n    return [8, 8];\r\n  }\r\n  if (value > 50000 && value <= 300000) {\r\n    return [10, 10];\r\n  }\r\n  if (value > 300000 && value <= 2000000) {\r\n    return [12, 12];\r\n  }\r\n  if (value > 2000000 && value <= 5000000) {\r\n    return [14, 14];\r\n  }\r\n  return [16, 16];\r\n}\r\n\r\nexport function iconSizeByPercentage(value: number) {\r\n  if (value <= 1.5) {\r\n    return [4, 4];\r\n  }\r\n  if (value > 1.5 && value <= 3) {\r\n    return [6, 6];\r\n  }\r\n  if (value > 3 && value <= 4.5) {\r\n    return [8, 8];\r\n  }\r\n  if (value > 4.5 && value <= 8) {\r\n    return [10, 10];\r\n  }\r\n  if (value > 8 && value <= 12.5) {\r\n    return [12, 12];\r\n  }\r\n  if (value > 12.5 && value <= 16) {\r\n    return [14, 14];\r\n  }\r\n  return [16, 16];\r\n}\r\n\r\nexport function setTargetData(\r\n  worldwide: WorldWide,\r\n  countries: Record<string, Province>,\r\n  targetData: string\r\n) {\r\n  let targetCountry = countries[targetData];\r\n\r\n  const { affectedCountries, updated } = worldwide;\r\n  let customWorldwide;\r\n\r\n  if (targetCountry) {\r\n    let stats = targetCountry.stats;\r\n\r\n    customWorldwide = {\r\n      active: targetCountry.active,\r\n      cases: stats.confirmed,\r\n      deaths: stats.deaths,\r\n      recovered: stats.recovered,\r\n      todayCases: stats.todayCases,\r\n      todayDeaths: stats.todayDeaths,\r\n      todayRecovered: stats.todayRecovered,\r\n      updated,\r\n      affectedCountries,\r\n    };\r\n  }\r\n\r\n  if (targetData === \"Global\") {\r\n    customWorldwide = worldwide;\r\n  }\r\n\r\n  return customWorldwide as WorldWide;\r\n}\r\n\r\nexport function getSearchResults(\r\n  countries: Record<string, Province>,\r\n  searchTerm: string\r\n) {\r\n  const countriesArray = Object.values(countries);\r\n\r\n  return countriesArray.filter(({ country }) => {\r\n    if (searchTerm === \"\") {\r\n      return null;\r\n    }\r\n\r\n    return country.toLowerCase().startsWith(searchTerm.toLowerCase());\r\n  });\r\n}\r\n","import L from \"leaflet\";\r\nimport { iconSizeByCases, commify, iconSizeByPercentage } from \"./helpers\";\r\n\r\nconst accessToken = process.env.REACT_APP_TOKEN;\r\n\r\nexport const tileLayer = `https://api.mapbox.com/styles/v1/kriszzy01/ckkcxmtt12ax117mn75yqjd4a/tiles/256/{z}/{x}/{y}@2x?access_token=${accessToken}`;\r\nexport const attribution =\r\n  'Map data &copy; <a href=\"https://www.openstreetmap.org/\">OpenStreetMap</a> contributors, <a href=\"https://creativecommons.org/licenses/by-sa/2.0/\">CC-BY-SA</a>, Imagery © <a href=\"https://www.mapbox.com/\">Mapbox</a>';\r\n\r\nexport function dynamicFlyTo(targetData, countries, mapInstance) {\r\n  let targetCountry = countries[targetData];\r\n\r\n  if (targetCountry) {\r\n    const {\r\n      coordinates: { latitude, longitude },\r\n    } = countries[targetData];\r\n\r\n    const latlng = L.latLng(+latitude, +longitude);\r\n    mapInstance.flyTo(latlng, 5);\r\n\r\n    mapInstance.eachLayer(({ feature, _tooltip }) => {\r\n      let prop = feature?.properties;\r\n\r\n      if (prop?.country === targetData) {\r\n        L.popup()\r\n          .setLatLng(latlng)\r\n          .setContent(_tooltip?._content)\r\n          .addTo(mapInstance);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nexport function geoJsonToMarkers(geoJson, dataType, option) {\r\n  return L.geoJSON(geoJson, {\r\n    pointToLayer: markerCreator(dataType, option),\r\n  });\r\n}\r\n\r\nfunction markerCreator(dataType, targetDataFunction) {\r\n  return (feature, latLng) => {\r\n    const markerProps = getMarkerProps(feature, dataType);\r\n    const marker = L.marker(latLng, {\r\n      icon: L.divIcon({\r\n        className: `icon ${markerProps.class}`,\r\n        iconSize:\r\n          markerProps.class === \"icon-ratio\"\r\n            ? iconSizeByPercentage(markerProps.size)\r\n            : iconSizeByCases(markerProps.size),\r\n      }),\r\n    });\r\n\r\n    const popup = L.popup().setLatLng(latLng).setContent(markerProps.html); //Create popup\r\n    marker.bindTooltip(markerProps.html); //Add tooltil to display on marker hover\r\n\r\n    marker.on(\"click\", ({ target: { _map: map, feature }, latlng }) => {\r\n      targetDataFunction(feature.properties.country); //Dispatch event to set single country\r\n      popup.openOn(map)\r\n      map.flyTo(latlng, 5); //Fly to a marker, zooming in with zoom level of 3\r\n\r\n      //map.once(\"moveend\", () => popup.openOn(map)); //Add popup after moving to marker\r\n    }); //Handle Clicking a map\r\n\r\n    return marker;\r\n  };\r\n}\r\n\r\nfunction getMarkerProps(feature, dataType) {\r\n  const {\r\n    properties: { stats, active, tests, province, country },\r\n  } = feature;\r\n\r\n  switch (dataType) {\r\n    case \"Active\":\r\n      return {\r\n        size: active,\r\n        class: \"icon-active\",\r\n        html: `\r\n      <div>\r\n          <h2>${province ? `${province},` : \"\"} ${country}</h2>\r\n          <p>\r\n            <span class=\"color-active\">${commify(active)}</span> \r\n              Active Cases\r\n          </p>\r\n      </div>\r\n      `,\r\n      };\r\n\r\n    case \"Tests\":\r\n      return {\r\n        size: tests / 25,\r\n        class: \"icon-tests\",\r\n        html: `\r\n      <div>\r\n          <h2>${province ? `${province},` : \"\"} ${country}</h2>\r\n          <p>\r\n            <span class=\"color-active\">${commify(\r\n              tests\r\n            )}</span> Tests carried out\r\n          </p>\r\n      </div>\r\n      `,\r\n      };\r\n\r\n    case \"Case-Fatality Ratio\":\r\n      return {\r\n        size: (stats.deaths * 100) / stats.confirmed,\r\n        class: \"icon-ratio\",\r\n        html: `\r\n      <div>\r\n          <h2>${province ? `${province},` : \"\"} ${country}</h2>\r\n          <p>\r\n            <span class=\"color-deaths\">\r\n              ${((stats.deaths * 100) / stats.confirmed).toFixed(\r\n                2\r\n              )}</span>% Case-Fatality Ratio\r\n          </p>\r\n      </div>\r\n      `,\r\n      };\r\n\r\n    default:\r\n      return {\r\n        size: stats.confirmed,\r\n        class: \"\",\r\n        html: `\r\n      <div>\r\n          <h2>${province ? `${province},` : \"\"} ${country}</h2>\r\n          <p>\r\n            <span class=\"color-active\">${commify(\r\n              stats.confirmed\r\n            )}</span> Cases</p>\r\n          <p>\r\n            <span class=\"color-deaths\">${commify(\r\n              stats.deaths\r\n            )}</span> Deaths</p>\r\n          <p>\r\n            <span class=\"color-recovered\">${commify(\r\n              stats.recovered\r\n            )}</span> Recovered</p>\r\n      </div>\r\n      `,\r\n      };\r\n  }\r\n}\r\n","import { ChartOptions } from \"chart.js\";\r\nimport { ChartData, WorldWide, Province } from \"../types\";\r\nimport { commify } from \"./helpers\";\r\n\r\nexport function getTotal(\r\n  country: Record<string, Province>,\r\n  world: WorldWide,\r\n  targetData: string\r\n) {\r\n  if (targetData === \"Global\") {\r\n    return {\r\n      deaths: world.deaths,\r\n      cases: world.cases,\r\n      recovered: world.recovered,\r\n    };\r\n  }\r\n\r\n  const {\r\n    stats: { deaths, confirmed, recovered },\r\n  } = country[targetData];\r\n\r\n  return {\r\n    deaths,\r\n    cases: confirmed,\r\n    recovered,\r\n  };\r\n}\r\n\r\nexport function historicalToChartData(data: Record<string, number>) {\r\n  let convertedData: ChartData[] = [];\r\n  let lastData;\r\n\r\n  for (let key in data) {\r\n    if (lastData) {\r\n      let dataChange = data[key] - lastData;\r\n\r\n      let nextDay = new Date(key);\r\n      let today = new Date(nextDay);\r\n      today.setDate(today.getDate() + 2);\r\n      let newKey = today.toUTCString(); //Formatted to be supported by moment.js\r\n\r\n      convertedData = [\r\n        ...convertedData,\r\n        { x: newKey, y: dataChange < 0 ? 0 : dataChange },\r\n      ];\r\n    }\r\n    lastData = data[key];\r\n  }\r\n\r\n  return convertedData;\r\n}\r\n\r\nexport function historicalData(\r\n  targetData: string,\r\n  world: Record<string, number>,\r\n  country: Record<string, number>\r\n) {\r\n  if (targetData === \"Global\") {\r\n    return historicalToChartData(world);\r\n  }\r\n\r\n  return historicalToChartData(country);\r\n}\r\n\r\nfunction getPlaceKeys(value: string | number) {\r\n  const seperateByComma = commify(+value);\r\n\r\n  return seperateByComma.split(\"\").filter((e) => e === \",\").length;\r\n}\r\n\r\nfunction toPlaceValue(value: string | number) {\r\n  let initialValue = String(value);\r\n\r\n  let places: Record<number, string> = {\r\n    1: \"k\",\r\n    2: \"M\",\r\n    3: \"B\",\r\n    4: \"T\",\r\n  };\r\n\r\n  const placeValueKeys = getPlaceKeys(initialValue); //Determine which letter will be added\r\n\r\n  let valueArray = initialValue.split(\"\");\r\n  let lastThree = valueArray.reverse().slice(0, 3).join(\"\"); //Select the last three values\r\n  \r\n  let withoutLastThree = +initialValue.replace(lastThree, \"\"); //Delete the last three values from initialValue\r\n  if (valueArray.length <= 3) {\r\n    withoutLastThree = +initialValue\r\n  }\r\n  \r\n  let result = commify(withoutLastThree).replace(\",\", \".\");\r\n  if (result.includes(\".\") && valueArray.length > 3) {\r\n    result = result.replaceAll(\"0\", \"\");\r\n  }\r\n\r\n  if (result.endsWith(\".\")) {\r\n    result = result.replaceAll(\".\", \"\");\r\n  }\r\n\r\n  let placeValue = !places[placeValueKeys] ? \"\" : places[placeValueKeys];\r\n\r\n  return result + placeValue;\r\n}\r\n\r\nconst baseChartOptions: ChartOptions = {\r\n  maintainAspectRatio: false,\r\n  legend: {\r\n    display: false,\r\n  },\r\n  tooltips: {\r\n    mode: \"index\",\r\n    intersect: false,\r\n  },\r\n  scales: {\r\n    xAxes: [\r\n      {\r\n        type: \"time\",\r\n        time: {\r\n          unit: \"month\",\r\n          displayFormats: {\r\n            month: \"MMM\"\r\n          }\r\n        },\r\n        gridLines: {\r\n          display: false,\r\n        },\r\n      },\r\n    ],\r\n    yAxes: [\r\n      {\r\n        position: \"right\",\r\n        gridLines: {\r\n          display: false,\r\n        },\r\n        ticks: {\r\n          callback: function (value) {\r\n            return toPlaceValue(value);\r\n          },\r\n        },\r\n      },\r\n    ],\r\n  },\r\n};\r\n\r\nexport const chartOptions: any = {\r\n  bar: {\r\n    ...baseChartOptions,\r\n  },\r\n  line: { ...baseChartOptions },\r\n};\r\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\r\nimport { CountryState, Country, AppThunk, CountryHistory } from \"../types\";\r\nimport { customCountryPayload } from \"../utils\";\r\nimport { getHistorical, getStatistics } from \"../api\";\r\n\r\nconst initialState: CountryState = {\r\n  status: \"idle\",\r\n  error: null,\r\n  cummulative: {},\r\n  historical: {},\r\n};\r\n\r\nconst fetchStart = (state: CountryState) => {\r\n  state.status = \"pending\";\r\n  state.error = null;\r\n};\r\n\r\nconst fetchFailure = (\r\n  state: CountryState,\r\n  { payload }: PayloadAction<string>\r\n) => {\r\n  state.status = \"failure\";\r\n  state.error = payload;\r\n};\r\n\r\nconst country = createSlice({\r\n  name: \"country\",\r\n  initialState,\r\n  reducers: {\r\n    fetchCountryStart: fetchStart,\r\n\r\n    fetchCountrySuccess(state, { payload }: PayloadAction<Country[]>) {\r\n      const normalizedPayload = customCountryPayload(payload); //Customize the payload object to match province payload object\r\n\r\n      state.status = \"success\";\r\n      state.cummulative = normalizedPayload;\r\n      state.error = null;\r\n    },\r\n\r\n    fetchCountryFailure: fetchFailure,\r\n\r\n    //Historical Data\r\n    fetchCountryHistoryStart: fetchStart,\r\n\r\n    fetchCountryHistorySuccess(\r\n      state,\r\n      { payload }: PayloadAction<CountryHistory>\r\n    ) {\r\n      state.status = \"success\";\r\n      state.historical = {\r\n        ...state.historical,\r\n        [payload.country]: payload.timeline,\r\n      };\r\n      state.error = null;\r\n    },\r\n\r\n    fetchCountryHistoryFailure: fetchFailure,\r\n  },\r\n});\r\n\r\nexport const {\r\n  fetchCountryStart,\r\n  fetchCountrySuccess,\r\n  fetchCountryFailure,\r\n  fetchCountryHistoryStart,\r\n  fetchCountryHistorySuccess,\r\n  fetchCountryHistoryFailure,\r\n} = country.actions;\r\n\r\nexport default country.reducer;\r\n\r\n/****** Thunks ******/\r\nexport const fetchCountry = (): AppThunk => async (dispatch) => {\r\n  try {\r\n    dispatch(fetchCountryStart());\r\n\r\n    const response = await getStatistics(\"countries\");\r\n    dispatch(fetchCountrySuccess(response));\r\n  } catch (error) {\r\n    dispatch(fetchCountryFailure(error.message));\r\n  }\r\n};\r\n\r\nexport const fetchCountryHistory = (country: string): AppThunk => async (\r\n  dispatch\r\n) => {\r\n  try {\r\n    dispatch(fetchCountryHistoryStart());\r\n\r\n    const response = await getHistorical(country);\r\n    dispatch(fetchCountryHistorySuccess(response));\r\n  } catch (error) {\r\n    dispatch(fetchCountryHistoryFailure(error.message));\r\n  }\r\n};\r\n","import { RootState } from \"../types\";\r\n\r\nexport const getWorldwide = (state: RootState) => state.worldwide.cummulative;\r\nexport const getWorldHistory = (state: RootState) => state.worldwide.historical;\r\n\r\nexport const getCountry = (state: RootState) => state.country.cummulative;\r\nexport const getCountryHistory = (state: RootState) => state.country.historical;\r\n\r\nexport const getMapData = (state: RootState) => state.mapData.activeData;\r\nexport const getTargetData = (state: RootState) => state.mapData.targetData;\r\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\r\n\r\nconst initialState = {\r\n  activeData: \"Cummulative\",\r\n  targetData: \"Global\",\r\n};\r\n\r\nconst map = createSlice({\r\n  name: \"mapData\",\r\n  initialState,\r\n  reducers: {\r\n    setMapData(state, { payload }: PayloadAction<string>) {\r\n      state.activeData = payload;\r\n    },\r\n    setTargetData(state, { payload }: PayloadAction<string>) {\r\n      state.targetData = payload;\r\n    },\r\n  },\r\n});\r\n\r\nexport const { setMapData, setTargetData } = map.actions;\r\n\r\nexport default map.reducer;\r\n","import React, { useEffect } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { Province } from \"../types\";\r\nimport { setTargetData } from \"../slices/map\";\r\n\r\ninterface Dropdown {\r\n  searchResult: Province[];\r\n  searchTerm: string;\r\n  setSearchTerm: React.Dispatch<React.SetStateAction<string>>;\r\n}\r\n\r\nexport const Dropdown: React.FC<Dropdown> = ({\r\n  searchResult,\r\n  searchTerm,\r\n  setSearchTerm,\r\n}) => {\r\n  const dispatch = useDispatch();\r\n  const isSearchResults = searchResult.length > 0;\r\n  const isSearchTerm = searchTerm !== \"\";\r\n\r\n  const handleClick = (country: string) => {\r\n    dispatch(setTargetData(country));\r\n    setSearchTerm(\"\");\r\n  };\r\n\r\n  useEffect(() => {\r\n    //Stop scrolling on body if dropdown is open\r\n    if (searchTerm) {\r\n      document.querySelector(\"body\")?.setAttribute(\"data-scroll\", \"\");\r\n    }\r\n\r\n    return () => {\r\n      document.querySelector(\"body\")?.removeAttribute(\"data-scroll\");\r\n    };\r\n  }, [searchTerm, isSearchTerm]);\r\n\r\n  return (\r\n    <div className=\"dropdown\" id=\"dropdown\" data-expanded={searchTerm !== \"\"}>\r\n      {isSearchResults ? (\r\n        <ul>\r\n          {searchResult.map(({ flag, country: name }) => {\r\n            return (\r\n              <li key={name} onClick={() => handleClick(name)}>\r\n                <span>\r\n                  <img src={flag} alt={`flag of ${name}`} />\r\n                </span>\r\n                <span>{name}</span>\r\n              </li>\r\n            );\r\n          })}\r\n        </ul>\r\n      ) : (\r\n        <p>Country not found</p>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n","import React, { useEffect, useRef } from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { getCountry } from \"../selectors\";\r\nimport { Dropdown } from \"./Dropdown\";\r\nimport { useSearchbar } from \"../hooks\";\r\nimport { getSearchResults } from \"../utils\";\r\n\r\ninterface SearchbarProps {\r\n  setOpenSearchbar: React.Dispatch<React.SetStateAction<boolean>>;\r\n  openSearchbar: boolean;\r\n}\r\n\r\nexport const Searchbar: React.FC<SearchbarProps> = ({\r\n  setOpenSearchbar,\r\n  openSearchbar,\r\n}) => {\r\n  const searchbarRef = useRef<HTMLDivElement>(null);\r\n  const [searchInput, setSearchInput] = useSearchbar(\"\", searchbarRef);\r\n\r\n  const countries = useSelector(getCountry);\r\n  const searchResult = getSearchResults(countries, searchInput);\r\n\r\n  const inputRef = useRef<HTMLInputElement>(null);\r\n  useEffect(() => {\r\n    if (openSearchbar) {\r\n      inputRef.current?.focus();\r\n    }\r\n  }, [openSearchbar]);\r\n\r\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) =>\r\n    setSearchInput(event.target.value);\r\n\r\n  const handleCloseSearchBar = () => {\r\n    setSearchInput(\"\");\r\n    setOpenSearchbar(false);\r\n  };\r\n\r\n  return (\r\n    <div className=\"searchbar-container\" ref={searchbarRef}>\r\n      <div\r\n        className=\"searchbar\"\r\n        aria-expanded={searchInput !== \"\"}\r\n        aria-controls=\"dropdown\"\r\n      >\r\n        <div>\r\n          <span aria-hidden=\"true\" style={{ height: \"24px\" }}>\r\n            <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24\" width=\"24\">\r\n              <path d=\"M0 0h24v24H0z\" fill=\"none\"></path>\r\n              <path d=\"M15.5 14h-.79l-.28-.27A6.471 6.471 0 0016 9.5 6.5 6.5 0 109.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z\"></path>\r\n            </svg>\r\n          </span>\r\n\r\n          <input\r\n            type=\"text\"\r\n            value={searchInput}\r\n            placeholder=\"Search by Country\"\r\n            onChange={handleChange}\r\n            ref={inputRef}\r\n          />\r\n        </div>\r\n\r\n        <Dropdown\r\n          searchResult={searchResult}\r\n          searchTerm={searchInput}\r\n          setSearchTerm={setSearchInput}\r\n        />\r\n      </div>\r\n\r\n      <button\r\n        type=\"button\"\r\n        aria-label=\"close searchbar\"\r\n        onClick={handleCloseSearchBar}\r\n      >\r\n        <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24\" width=\"24\">\r\n          <path d=\"M0 0h24v24H0z\" fill=\"none\"></path>\r\n          <path d=\"M12 2C6.47 2 2 6.47 2 12s4.47 10 10 10 10-4.47 10-10S17.53 2 12 2zm5 13.59L15.59 17 12 13.41 8.41 17 7 15.59 10.59 12 7 8.41 8.41 7 12 10.59 15.59 7 17 8.41 13.41 12 17 15.59z\"></path>\r\n        </svg>\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n","import { useEffect, useState } from \"react\";\r\n\r\nexport const useSearchbar = (\r\n  initialValue: string,\r\n  ref: React.RefObject<HTMLDivElement>\r\n) => {\r\n  const [value, setValue] = useState(initialValue);\r\n\r\n  useEffect(() => {\r\n    const handleClickOutside = (event: any) => {\r\n      if (ref.current && !ref.current.contains(event.target)) {\r\n        setValue(\"\");\r\n      }\r\n    };\r\n\r\n    document.addEventListener(\"mousedown\", handleClickOutside);\r\n\r\n    return () => {\r\n      document.removeEventListener(\"mousedown\", handleClickOutside);\r\n    };\r\n  }, [ref]);\r\n\r\n  return [value, setValue] as const;\r\n};\r\n","import React, { useState } from \"react\";\r\nimport { Searchbar } from \"../components/Searchbar\";\r\n\r\nexport const Header: React.FC = () => {\r\n  const [openSearchbar, setOpenSearchbar] = useState(false);\r\n  const [openMenu, setOpenMenu] = useState(false);\r\n\r\n  return (\r\n    <header>\r\n      <div data-searchcountry={openSearchbar}>\r\n        <button\r\n          type=\"button\"\r\n          aria-labelledby=\"menu-label\"\r\n          aria-expanded={openMenu}\r\n          aria-controls=\"sidebar\"\r\n          onClick={() => setOpenMenu(!openMenu)}\r\n        >\r\n          <span className=\"vh\" id=\"menu-label\">\r\n            {openMenu ? \"close menu\" : \"open menu\"}\r\n          </span>\r\n        </button>\r\n\r\n        <h1>COVID-19 Dashboard</h1>\r\n\r\n        <button\r\n          type=\"button\"\r\n          aria-label=\"open searchbar\"\r\n          onClick={() => setOpenSearchbar(true)}\r\n        >\r\n          <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24\" width=\"24\">\r\n            <path d=\"M0 0h24v24H0z\" fill=\"none\"></path>\r\n            <path d=\"M15.5 14h-.79l-.28-.27A6.471 6.471 0 0016 9.5 6.5 6.5 0 109.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z\"></path>\r\n          </svg>\r\n        </button>\r\n\r\n        <Searchbar\r\n          setOpenSearchbar={setOpenSearchbar}\r\n          openSearchbar={openSearchbar}\r\n        />\r\n\r\n        <nav>\r\n          <a role=\"presentation\">Overview</a>\r\n          <a role=\"presentation\">Data Table</a>\r\n        </nav>\r\n      </div>\r\n    </header>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { commify } from \"../utils\";\r\n\r\ninterface PillProps {\r\n  title: string;\r\n  today: number;\r\n  total: number;\r\n}\r\n\r\nexport const Card: React.FC<PillProps> = ({ title, today, total }) => {\r\n  return (\r\n    <div className=\"card\">\r\n      <h2 className={`color-${title?.toLowerCase()}`}>{title}</h2>\r\n      <p>{commify(today)} <span>Today</span></p>\r\n      <p>{commify(total)} <span>Total</span></p>\r\n    </div>\r\n  );\r\n};\r\n","import React, { useEffect } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { useMap } from \"react-leaflet\";\r\nimport { setMapData } from \"../slices/map\";\r\nimport { setTargetData } from \"../slices/map\";\r\n\r\nimport {\r\n  getMapData,\r\n  getCountry,\r\n  getTargetData,\r\n  getCountryHistory,\r\n} from \"../selectors\";\r\n\r\nimport { geoJsonToMarkers, featuresToGeoJSON, dynamicFlyTo } from \"../utils\";\r\nimport { fetchCountryHistory } from \"../slices/country\";\r\n\r\nconst tabItems = [\"Cummulative\", \"Active\", \"Tests\", \"Case-Fatality Ratio\"];\r\n\r\nexport const MapControls: React.FC = () => {\r\n  const mapInstance = useMap(); //Instance of the map object\r\n  const dispatch = useDispatch();\r\n\r\n  const countries = useSelector(getCountry);\r\n  const countryHistory = useSelector(getCountryHistory);\r\n  const activeData = useSelector(getMapData);\r\n  const targetData = useSelector(getTargetData);\r\n\r\n  dynamicFlyTo(targetData, countries, mapInstance); //Map flies to the cordinates of a location, which is determined by the selected country\r\n\r\n  const handleMarkerClick = (data: string) => dispatch(setTargetData(data));\r\n\r\n  const locationsGeoJsonLayers = geoJsonToMarkers(\r\n    featuresToGeoJSON(countries),\r\n    activeData,\r\n    handleMarkerClick\r\n  );\r\n\r\n  const handleGlobeButton = () => {\r\n    const zoom = window.innerWidth > 700 ? 2 : 1;\r\n\r\n    mapInstance.setView([20, 0], zoom);\r\n    dispatch(setTargetData(\"Global\"));\r\n  };\r\n\r\n  //App re-renders only when activeData changes, hence no need for dependency array\r\n  //since this is the intended behaviour\r\n  useEffect(() => {\r\n    locationsGeoJsonLayers.addTo(mapInstance);\r\n\r\n    return () => {\r\n      locationsGeoJsonLayers.removeFrom(mapInstance); //Clear all markers from map\r\n    };\r\n  });\r\n\r\n  //Fetch Historical Data for selected country\r\n  useEffect(() => {\r\n    if (targetData !== \"Global\" && !countryHistory[targetData]) {\r\n      //Conditions neccessary to prevent calling fetch when country history already exists\r\n      dispatch(fetchCountryHistory(targetData)); \r\n    }\r\n  });\r\n\r\n  return (\r\n    <div className=\"mapcontrols\">\r\n      <div className=\"mapcontrols__buttons\">\r\n        {tabItems.map((item) => (\r\n          <button\r\n            type=\"button\"\r\n            onClick={() => dispatch(setMapData(item))}\r\n            data-selected={activeData === item}\r\n            key={item}\r\n          >\r\n            {item}\r\n          </button>\r\n        ))}\r\n      </div>\r\n\r\n      <button type=\"button\" aria-label=\"view globe\" onClick={handleGlobeButton}>\r\n        <svg width=\"20\" height=\"20\">\r\n          <path\r\n            fill=\"white\"\r\n            d=\"M6.64 3.928C7.5 1.478 8.785 0 10 0c1.216 0 2.5 1.478 3.36 3.928H6.64zM6.75.544a10.022 10.022 0 00-4.688 3.384h3.072C5.484 2.72 6.03 1.576 6.75.544zM4.284 10c-.005-1.56.155-3.117.478-4.644H1.147a9.975 9.975 0 000 9.288h3.615A22.031 22.031 0 014.284 10zm1.432 0c-.01 1.563.163 3.121.515 4.644h7.538c.352-1.523.525-3.081.515-4.644a20.078 20.078 0 00-.515-4.644H6.23A20.078 20.078 0 005.716 10zm12.222-6.072A10.022 10.022 0 0013.25.544a11.522 11.522 0 011.616 3.384h3.072zM13.25 19.456a10.022 10.022 0 004.688-3.384h-3.072a11.522 11.522 0 01-1.616 3.384zM2.062 16.072a10.022 10.022 0 004.688 3.384 11.522 11.522 0 01-1.616-3.384H2.062zM15.238 5.356c.323 1.527.483 3.084.478 4.644a22.031 22.031 0 01-.478 4.644h3.615a9.975 9.975 0 000-9.288h-3.615zM6.64 16.072C7.5 18.522 8.784 20 10 20c1.216 0 2.5-1.478 3.36-3.928H6.64z\"\r\n            fillRule=\"nonzero\"\r\n          ></path>\r\n        </svg>\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport L from \"leaflet\";\r\nimport { MapContainer } from \"react-leaflet\";\r\n\r\nexport const Map: React.FC = ({ children }) => {\r\n  /*The farthest East longitude of a map is 180, West is -180.\r\n  The farthest North Latitude of a map is 90, South is -90. \r\n  We use the farthest longitudes and latitudes to bound the map. This ensures we can't view anything outside these bounds.\r\n  Since the map is bound to the farthest latitudes and longtitudes, the map view is restricted to the whole world.\r\n  */\r\n  const southWest = new L.LatLng(-90, -180); //South-west point for the bound\r\n  const northEast = new L.LatLng(90, 180); //North-east point for the bound\r\n  const bounds = L.latLngBounds(southWest, northEast); //Sets and restricts the map view to a geopgraphical region, in this case the world\r\n  const zoom = window.innerWidth > 700 ? 2 : 1; //Set the zoom depending on the device width\r\n\r\n  return (\r\n    <div>\r\n      <MapContainer\r\n        center={[20, 0]}\r\n        zoom={zoom}\r\n        minZoom={zoom}\r\n        zoomControl={false}\r\n        maxBounds={bounds}\r\n        maxBoundsViscosity={0.75}\r\n      >\r\n        {children}\r\n      </MapContainer>\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { TileLayer, ZoomControl } from \"react-leaflet\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { getWorldwide, getCountry, getTargetData } from \"../selectors\";\r\nimport { Card } from \"../components/Card\";\r\nimport { MapControls } from \"../components/MapControls\";\r\nimport { Map } from \"../blocks/Map\";\r\nimport { attribution, commify, tileLayer, setTargetData } from \"../utils\";\r\n\r\nexport const DataSummary: React.FC = () => {\r\n  const world = useSelector(getWorldwide);\r\n  const countries = useSelector(getCountry);\r\n  const targetData = useSelector(getTargetData);\r\n\r\n  const {\r\n    active,\r\n    cases,\r\n    deaths,\r\n    recovered,\r\n    todayCases,\r\n    todayDeaths,\r\n    todayRecovered,\r\n    updated,\r\n    affectedCountries,\r\n  } = setTargetData(world, countries, targetData);\r\n\r\n  return (\r\n    <div className=\"summary\">\r\n      <div className=\"summary__data\">\r\n        <div>\r\n          <Card title=\"Active\" today={todayCases} total={active} />\r\n          <Card title=\"Recovered\" today={todayRecovered} total={recovered} />\r\n          <Card title=\"Deaths\" today={todayDeaths} total={deaths} />\r\n        </div>\r\n\r\n        <Map>\r\n          <TileLayer attribution={attribution} url={tileLayer} />\r\n          <ZoomControl position=\"bottomright\" />\r\n          <MapControls />\r\n        </Map>\r\n      </div>\r\n\r\n      <div className=\"summary__text\">\r\n        <h3>\r\n          <span>\r\n            {targetData === \"Global\" ? \"Globally\" : `In ${targetData}`}\r\n          </span>\r\n          , as of <span>{new Date(updated).toString()}</span>, there has been{\" \"}\r\n          <span className=\"color-active\">{commify(cases)} confirmed cases</span>{\" \"}\r\n          of COVID-19, including{\" \"}\r\n          <span className=\"color-deaths\">{commify(deaths)} deaths</span>{\" \"}\r\n          reported by Johns Hopkins University.\r\n        </h3>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","import React, { useEffect } from \"react\";\r\nimport C from \"chart.js\";\r\nimport { ChartData } from \"../types\";\r\nimport { chartOptions, commify } from \"../utils\";\r\n\r\ninterface ChartProps {\r\n  type: string;\r\n  label: any[];\r\n  data: ChartData[];\r\n  id: string;\r\n  value?: number;\r\n}\r\n\r\nconst colors: Record<string, string> = {\r\n  \"Confirmed cases\": \"rgb(0, 147, 213)\",\r\n  Deaths: \"rgb(236, 0, 0)\",\r\n  Recovered: \"green\",\r\n};\r\n\r\nexport const Chart: React.FC<ChartProps> = ({ type, label, data, id }) => {\r\n  useEffect(() => {\r\n    const mychart = new C(id, {\r\n      type,\r\n      data: {\r\n        datasets: [\r\n          {\r\n            data,\r\n            backgroundColor: colors[label[1]],\r\n            hoverBackgroundColor: \"rgb(2, 20, 34)\",\r\n            borderColor: \"rgba(32, 33, 36, 0.5)\",\r\n            pointRadius: 0,\r\n          },\r\n        ],\r\n      },\r\n      options: chartOptions[type],\r\n    });\r\n\r\n    return () => {\r\n      mychart.destroy();\r\n    };\r\n  }, [type, data, id, label]);\r\n\r\n  return (\r\n    <div className=\"chart\">\r\n      <p style={{ color: `${colors[label[1]]}` }}>\r\n        <span>{commify(label[0])}</span> <br />\r\n        <span>{label[1]}</span>\r\n      </p>\r\n      <div className=\"chart__container\">\r\n        <canvas id={id}></canvas>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","import React, { useState } from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { getTotal, historicalData } from \"../utils\";\r\nimport { Chart } from \"../components/Chart\";\r\n\r\nimport {\r\n  getWorldHistory,\r\n  getCountryHistory,\r\n  getWorldwide,\r\n  getTargetData,\r\n  getCountry,\r\n} from \"../selectors\";\r\n\r\nexport const DataChart: React.FC = () => {\r\n  const [chartType, setChartType] = useState(\"bar\");\r\n\r\n  const worldHistory = useSelector(getWorldHistory);\r\n  const countryHistory = useSelector(getCountryHistory);\r\n  const targetCountry = useSelector(getTargetData);\r\n  const world = useSelector(getWorldwide);\r\n  const country = useSelector(getCountry);\r\n\r\n  const { cases, deaths, recovered } = getTotal(country, world, targetCountry);\r\n\r\n  const deathHistory = historicalData(\r\n    targetCountry,\r\n    worldHistory.deaths,\r\n    countryHistory[targetCountry]?.deaths\r\n  );\r\n  const casesHistory = historicalData(\r\n    targetCountry,\r\n    worldHistory.deaths,\r\n    countryHistory[targetCountry]?.cases\r\n  );\r\n\r\n  const recoveredHistory = historicalData(\r\n    targetCountry,\r\n    worldHistory.deaths,\r\n    countryHistory[targetCountry]?.recovered\r\n  );\r\n\r\n  return (\r\n    <div className=\"datachart\">\r\n      <div className=\"datachart__header\">\r\n        <h3>\r\n          {targetCountry === \"Global\"\r\n            ? \"Global Situation\"\r\n            : `Situation in ${targetCountry}`}\r\n        </h3>\r\n\r\n        <div>\r\n          <button\r\n            type=\"button\"\r\n            onClick={() => setChartType(\"bar\")}\r\n            data-active={chartType === \"bar\"}\r\n          >\r\n            Bar\r\n          </button>\r\n\r\n          <button\r\n            type=\"button\"\r\n            onClick={() => setChartType(\"line\")}\r\n            data-active={chartType === \"line\"}\r\n          >\r\n            Line\r\n          </button>\r\n        </div>\r\n      </div>\r\n\r\n      <Chart\r\n        type={chartType}\r\n        data={casesHistory}\r\n        id=\"confirmed\"\r\n        label={[cases, \"Confirmed cases\"]}\r\n      />\r\n      <Chart\r\n        type={chartType}\r\n        data={deathHistory}\r\n        id=\"deaths\"\r\n        label={[deaths, \"Deaths\"]}\r\n      />\r\n      <Chart\r\n        type={chartType}\r\n        data={recoveredHistory}\r\n        id=\"recovered\"\r\n        label={[recovered, \"Recovered\"]}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n","import React, { useEffect } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport \"./styles/style.scss\";\r\n\r\nimport { fetchWorldWide, fetchHistoricalAll } from \"./slices/worldwide\";\r\nimport { fetchCountry } from \"./slices/country\";\r\n\r\nimport { Header } from \"./blocks/Header\";\r\nimport { DataSummary } from \"./blocks/DataSummary\";\r\nimport { DataChart } from \"./blocks/DataChart\";\r\n\r\nconst App: React.FC = () => {\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => {\r\n    dispatch(fetchWorldWide());\r\n    dispatch(fetchCountry());\r\n    dispatch(fetchHistoricalAll());\r\n  }, [dispatch]);\r\n\r\n  return (\r\n    <>\r\n      <Header />\r\n      <main>\r\n        <DataSummary />\r\n        <DataChart />\r\n      </main>\r\n      <footer></footer>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import { combineReducers } from \"redux\";\r\nimport worldwideReducer from \"./worldwide\";\r\nimport mapDataReducer from \"./map\";\r\nimport countryReducer from \"./country\";\r\n\r\nconst rootReducer = combineReducers({\r\n  worldwide: worldwideReducer,\r\n  mapData: mapDataReducer,\r\n  country: countryReducer,\r\n});\r\n\r\nexport type RootState = ReturnType<typeof rootReducer>;\r\n\r\nexport default rootReducer;\r\n","import React from \"react\";\r\nimport { render } from \"react-dom\";\r\nimport App from \"./App\";\r\nimport { Provider } from \"react-redux\";\r\nimport { configureStore } from \"@reduxjs/toolkit\";\r\nimport rootReducer from \"./slices\";\r\n\r\nconst store = configureStore({\r\n  reducer: rootReducer,\r\n});\r\n\r\nrender(\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>,\r\n  document.querySelector(\"#root\")\r\n);\r\n"],"sourceRoot":""}